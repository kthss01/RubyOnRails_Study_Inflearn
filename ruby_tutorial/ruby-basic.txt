자료형
순수 객체지향적 언어
	원시 자료형이 사실상 존재하지 않고 모든 것은 객체인 언어
자료형이란
	여러 종류의 데이터를 식별하는 분류
대표적인 자료형
	숫자, 문자열, 배열(Array), 해시(Hash)

숫자
	2
문자열
	‘Hello World’ 
	“Hello World”
참 거짓
	true
	false
아무것도 없다 (null)
	nil

배열 (Array)
	번호(인덱스)와 번호에 대응하는 데이터들로 이루어진 자료 구조
	배열(Array) = [요소, 요소, …]
	people = [‘Alice’, 4423, 3.14, nil, false]
	인덱스 0부터 시작
	people[0] #=> ‘Alice’ 
		#=> 이게 뭔진 궁금하긴함
	people[10] #=> nil 
		없는 인덱스 접근 가능한 것으로 보임
해시 (Hash)
	키를 값에 매핑할 수 있는 자료 구조
	해시(Hash) = {키 => 요소}
	colors = { ‘red’ => ‘ff0000’, ‘green’ => ‘00ff00’ }
	= { red: ‘ff0000’, green: ‘00ff00’ }
위 방법 아래 방법 둘다 가능		

		colors[‘red’] #=> ‘ff0000’
		-> 맵이라고 생각
		
변수와 상수
변수란?
	변하는 값
상수란?
	변하지 않는 값

x = 2
변수는 대입할 값

루비 문법을 작성할 수 있는 창을 하나 보여주심
나중에 필요하면 알아보자

변수 선언
	x = 2 
		x라는 변수 만들고 2라는 상수 넣음
	타입은 선언안한다고 함

변수의 종류
	지역 변수
		foo = ‘foo in top level’
	전역 변수
		$foo = ‘foo in whole’
	인스턴스 변수
		@foo = ‘foo in instance’
	클래스 변수
		@@foo = ‘foo in class’


	앞에 변수형 선언이 없어도 됨

지역변수
	자신이 선언된 스코프에서만 참조 가능

	hello = “World”

	def cal_hello #=> 메소드
		puts hello
	end

	call_hello #=> ERROR

메소드 밖에서 지역변수 선언하면 메소드 안에서 사용시 에러남

전역변수
	어디서 선언하던, 어느 곳에서나 불러올 수 있음
	$hello = “World”

	def call_hello
		puts $hello
	end

	call_hello #=> “World”

	선언하고 불러올 때 $붙여야하는 듯

인스턴스 변수
	클래스 내에 있는 인스턴스에서 불러올 수 있다.
	인스턴스 끼리 공유

	class Ruler
		def get_length
			puts @hello
		end

		def set_length
			@hello = 1
		end
	end

클래스 안에 메소드에서만 씀
메소드 밖에는 클래스 변수로

클래스 변수
	클래스 내에 어디에서든 불러올 수 잇음

	class Ruler
		@@hello = 1

		def get_length
			puts @@hello
		end
	end

연산자
연산자란 
특정한 작업을 하기 위해서 사용하는 기호
대입 연산자, 산술 연산자, 비교 연산자, 논리 연산자

대입 
	a = 1
	변수에 값을 집어 넣기 위해
	대입 연산자 = 을 씀
	오른쪽 값을 왼쪽에 넣음
산술
	+, -, *, **, /, %
	** 제곱
	/ 나눈 몫
	% 나머지
	
	+ 
		‘a’ + ‘hello’ #=> ‘ahello’

	*
		[1, ‘h’] * 2 #=> [1, “h”, 1, “h”]  배열에 곱할 수 있음
	/
		5 / 2 #=> 2
		정수형으로 나누면 정수형으로 나옴
		실수형끼리 나누면 실수형으로 나옴 참고
비교
	a == b
		같으면 true 다르면 false
	a != b
	a < b
	a <= b
	a > b
	a >= b
논리
	and, && 연산
		and && 둘다 사용 가능
	or, || 연산
	not, ! 연산
	
기본적인 제어구조
제어문
	자료를 가공하기 위해 필요한 도구들
	실행 흐름의 제어를 위한 문법
	
	조건문
	if unless
		case라고도 있다고함
		if 만약 ~ 라면
		if 조건절1
			조건 1이 참일 때
		elsif 조건2
			조건 2가 참일 때
		else
			둘다 거짓일 때
		end

		unless 만약 ~가 아니라면
		unless 조건절1
			조건 1이 거짓일 때
		else
			조건 1이 참일 때
		end
		unlessif 이런건 없다고함

	참고 puts로 출력

	반복문
		for while
		while ~ 하는동안

			while 조건
				실행문
			end	

		for …, do … (~ 동안 ~를 하라)에서 유래
		for 변수 in 범위
			변수에 범위 값이 담겨서 사용 가능
		end

		for 변수 in 배열
			변수에 배열의 원소값이 담겨서 사용 가능
		end

			ex)
				for x in 0..10
					puts x
				end
				# 0 ~ 10 => 0..10
				# 0...10 => 10 포함 안함 참고
				
메소드의 정의
모든 문장은 명사와 동사로 이루어져 있다.
루비의 세계에서는 객체(Object)가 명사이고 메소드(Method)가 동사이다

ex) 영희가 달리다
	명사 영희
	동사 달리다

메소드에 파라미터(객체)를 넣어서 결과물(개체) 반환

ex)
	def peel_banana(banana)
		yummy_banana = banana.peel
		return yummy_banana
	end
